from utils import utils
import os
import unittest
import requests

class TestTemplateMapping(unittest.TestCase):
  def setUp(self):
    self.template_file = os.path.join(
        utils.MAPPING_DIR,
        'templates',
        'template.json'
    )

  def test_vrt_ids_have_template_mappings(self):
    """
    Check the template mapping path from template.json file
    and check the template url exists (or not) in template repository
    if the template is not found, it will give an error for template missing
    """
    template_mapping = utils.get_json(self.template_file)

    for id_list in self.all_template_lists(template_mapping):
      if len(id_list) >= 3:
          if '' not in id_list:
              template_path = os.path.join('submissions', 'description') + '/' + '/'.join(id_list)
              template_url = utils.TEMPLATE_BASE_URL + template_path
              response = requests.request("GET", template_url)

              self.assertNotEqual(response.status_code, 404, 'Missing template file for %s' % id_list)

  def all_template_lists(self, vrt, include_internal=True):
    """
    Get all valid vrt ids for a given vrt object, including internal nodes by default
    :param vrt: The vrt object
    :param include_internal: Whether to include internal nodes or only leaf nodes
    :return: ids in the form
      [
        ['category', 'subcategory', 'template.md'],
        ['category', 'subcategory', 'variant1', 'template.md'],
        ['category', 'subcategory', 'variant2', 'template.md']
      ]
    """
    def _all_template_lists(sub_vrt, prefix):
        if isinstance(sub_vrt, list):
            return [vrt_id for entry in sub_vrt for vrt_id in _all_template_lists(entry, prefix)]
        elif isinstance(sub_vrt, dict):
            if 'children' in sub_vrt:
                new_prefix = prefix + [sub_vrt['id']]
                sub_ids = _all_template_lists(sub_vrt['children'], new_prefix)
                if include_internal:
                    sub_ids += [new_prefix]
                return sub_ids
            else:
                return [prefix + [sub_vrt['id'], sub_vrt['template']]]
        else:
            print(sub_vrt)
            raise Exception('unexpected entry found')
    return _all_template_lists(vrt['content'], [])

if __name__ == "__main__":
    unittest.main()
